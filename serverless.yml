service: meishi

frameworkVersion: ">=1.28.0 <2.0.0"

plugins:
  - serverless-pseudo-parameters

custom:
  dynamodbTableName: "meishi-${self:provider.stage}-business-card-table"
  businessCardS3BucketName: "meishi-${self:provider.stage}-business-card-upload-bucket"
  trainingDataInputS3BucketName: "meishi-${self:provider.stage}-training-data-input-bucket"
  trainingDataOutputS3BucketName: "meishi-${self:provider.stage}-training-data-output-bucket"
  trainingDataIAMRoleName: "meishi-${self:provider.stage"}-training-data-iam-role"
  trainingDataIAMPolicyName: "meishi-${self:provider.stage"}-training-data-iam-role"

provider:
  name: aws
  runtime: go1.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "logs:DescribeLogStreams"
      Resource:
        - "arn:aws:logs:*:*:*"
    - Effect: "Allow"
      Action:
        - "comprehend:DetectEntities"
        - "textract:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodbTableName}
    - Effect: "Allow"
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:custom.s3BucketName}
        - arn:aws:s3:::${self:custom.s3BucketName}/*
  environment:
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    DYNAMODB_TABLE_NAME: ${self:custom.dynamodbTableName}

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  read-business-card:
    handler: bin/read-business-card
    events:
      - s3:
          bucket: ${self:custom.businessCardS3BucketName}
          event: s3:ObjectCreated:*

resources:
  Resources:

    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    TrainingDataIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:custom.trainingDataIAMRoleName}"
        Description: "A role for working with files in the client SFTP upload S3 bucket"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "sts:AssumeRole"
              Principal:
                Service: "comprehend.amazonaws.com"
        Policies:
          -
            PolicyName: "${self:custom.trainingDataIAMPolicyName}"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.trainingDataInputS3BucketName}
                - Effect: "Allow"
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${self:custom.trainingDataInputS3BucketName}/*
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${self:custom.trainingDataOutputS3BucketName}

    TrainingDataBucketInput:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.trainingDataInputS3BucketName}

    TrainingDataBucketOutput:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.trainingDataOutputS3BucketName}